openapi: 3.0.3
info:
  title: OpenRouter API
  description: |
    OpenRouter provides unified access to multiple AI models through a single API.
    
    OpenRouter normalizes the schema across models and providers to comply with the OpenAI Chat API,
    making it easy to switch between different AI models without changing your code.
    
    Features:
    - Access to 300+ AI models from multiple providers
    - OpenAI-compatible API
    - Automatic model routing and fallback
    - Pay-per-use pricing with credit system
    - Real-time model availability
  version: 1.0.0
  contact:
    name: OpenRouter API Support
    url: https://openrouter.ai/docs
  license:
    name: OpenRouter Terms of Service
    url: https://openrouter.ai/terms
  
servers:
  - url: https://openrouter.ai/api/v1
    description: OpenRouter Production API

security:
  - BearerAuth: []

paths:
  /chat/completions:
    post:
      summary: Create chat completion
      description: |
        Creates a model response for the given chat conversation.
        Compatible with OpenAI's chat completions API with additional OpenRouter-specific features.
      operationId: createChatCompletion
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
            examples:
              basic_chat:
                summary: Basic chat completion
                value:
                  model: "openai/gpt-4o"
                  messages:
                    - role: "user"
                      content: "Hello, how are you?"
              with_routing:
                summary: Chat with model routing
                value:
                  models: ["openai/gpt-4o", "anthropic/claude-3.5-sonnet"]
                  route: "fallback"
                  messages:
                    - role: "user"
                      content: "Explain quantum computing"
      responses:
        '200':
          description: Successful completion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
            text/event-stream:
              schema:
                type: string
                description: Server-sent events for streaming responses
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/InsufficientCredits'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/ServerError'

  /models:
    get:
      summary: List available models
      description: Lists all models available through OpenRouter
      operationId: listModels
      tags:
        - Models
      responses:
        '200':
          description: List of available models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /generation:
    get:
      summary: Get generation details
      description: Retrieve detailed information about a specific generation
      operationId: getGeneration
      tags:
        - Generations
      parameters:
        - name: id
          in: query
          required: true
          description: Generation ID returned from chat completion
          schema:
            type: string
      responses:
        '200':
          description: Generation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Generation not found

  /auth/key:
    get:
      summary: Get API key information
      description: Retrieve information about the current API key
      operationId: getKeyInfo
      tags:
        - Authentication
      responses:
        '200':
          description: API key information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /credits:
    get:
      summary: Get credit balance
      description: Retrieve current credit balance and usage information
      operationId: getCredits
      tags:
        - Credits
      responses:
        '200':
          description: Credit information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credits'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: |
        Use your OpenRouter API key as a Bearer token.
        Example: Authorization: Bearer sk-or-v1-...

  schemas:
    ChatCompletionRequest:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          description: A list of messages comprising the conversation so far
          items:
            $ref: '#/components/schemas/ChatMessage'
        model:
          type: string
          description: |
            ID of the model to use. If omitted, uses user's default.
            Format: provider/model-name (e.g., "openai/gpt-4o")
          example: "openai/gpt-4o"
        models:
          type: array
          description: List of models to route between (OpenRouter-specific)
          items:
            type: string
          example: ["openai/gpt-4o", "anthropic/claude-3.5-sonnet"]
        route:
          type: string
          enum: ["fallback"]
          description: Routing strategy (OpenRouter-specific)
        provider:
          $ref: '#/components/schemas/ProviderPreferences'
        transforms:
          type: array
          description: List of prompt transforms to apply (OpenRouter-specific)
          items:
            type: string
        max_tokens:
          type: integer
          minimum: 1
          description: Maximum number of tokens to generate
          example: 1000
        temperature:
          type: number
          minimum: 0
          maximum: 2
          description: Sampling temperature between 0 and 2
          example: 0.7
        top_p:
          type: number
          minimum: 0
          maximum: 1
          description: Nucleus sampling parameter
          example: 1
        top_k:
          type: integer
          minimum: 1
          description: Top-k sampling parameter (not available for OpenAI models)
        frequency_penalty:
          type: number
          minimum: -2
          maximum: 2
          description: Frequency penalty parameter
          example: 0
        presence_penalty:
          type: number
          minimum: -2
          maximum: 2
          description: Presence penalty parameter
          example: 0
        repetition_penalty:
          type: number
          minimum: 0
          maximum: 2
          description: Repetition penalty parameter
        stop:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Stop sequences for generation
        stream:
          type: boolean
          description: Whether to stream back partial progress
          default: false
        tools:
          type: array
          description: List of tools the model may call
          items:
            $ref: '#/components/schemas/Tool'
        tool_choice:
          $ref: '#/components/schemas/ToolChoice'
        response_format:
          type: object
          properties:
            type:
              type: string
              enum: ["json_object"]
          description: Force specific output format
        seed:
          type: integer
          description: Random seed for deterministic generation
        logit_bias:
          type: object
          additionalProperties:
            type: number
          description: Token biases
        top_logprobs:
          type: integer
          description: Number of most likely tokens to return
        min_p:
          type: number
          minimum: 0
          maximum: 1
          description: Minimum probability threshold
        top_a:
          type: number
          minimum: 0
          maximum: 1
          description: Top-a sampling parameter
        user:
          type: string
          description: Unique identifier for end-user

    ChatMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: ["system", "user", "assistant", "tool"]
          description: The role of the message author
        content:
          oneOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/ContentPart'
          description: The contents of the message
        name:
          type: string
          description: The name of the author (optional)
        tool_call_id:
          type: string
          description: Tool call ID (required for role "tool")

    ContentPart:
      oneOf:
        - $ref: '#/components/schemas/TextContent'
        - $ref: '#/components/schemas/ImageContent'

    TextContent:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum: ["text"]
        text:
          type: string

    ImageContent:
      type: object
      required:
        - type
        - image_url
      properties:
        type:
          type: string
          enum: ["image_url"]
        image_url:
          type: object
          required:
            - url
          properties:
            url:
              type: string
              description: URL or base64 encoded image data
            detail:
              type: string
              enum: ["auto", "low", "high"]
              default: "auto"

    Tool:
      type: object
      required:
        - type
        - function
      properties:
        type:
          type: string
          enum: ["function"]
        function:
          $ref: '#/components/schemas/FunctionDefinition'

    FunctionDefinition:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Function name
        description:
          type: string
          description: Function description
        parameters:
          type: object
          description: JSON Schema object describing function parameters

    ToolChoice:
      oneOf:
        - type: string
          enum: ["none", "auto"]
        - type: object
          required:
            - type
            - function
          properties:
            type:
              type: string
              enum: ["function"]
            function:
              type: object
              required:
                - name
              properties:
                name:
                  type: string

    ProviderPreferences:
      type: object
      properties:
        allow_fallbacks:
          type: boolean
          description: Allow fallback to other providers
        require_parameters:
          type: boolean
          description: Only use providers supporting all specified parameters
        data_collection:
          type: string
          enum: ["allow", "deny"]
          description: Data collection preference

    ChatCompletionResponse:
      type: object
      required:
        - id
        - object
        - created
        - model
        - choices
      properties:
        id:
          type: string
          description: Unique identifier for the completion
        object:
          type: string
          enum: ["chat.completion", "chat.completion.chunk"]
        created:
          type: integer
          description: Unix timestamp of creation
        model:
          type: string
          description: Model used for completion
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatChoice'
        usage:
          $ref: '#/components/schemas/Usage'
        system_fingerprint:
          type: string
          description: System fingerprint (if supported)

    ChatChoice:
      type: object
      properties:
        index:
          type: integer
        message:
          $ref: '#/components/schemas/ChatMessage'
        delta:
          $ref: '#/components/schemas/ChatMessage'
        finish_reason:
          type: string
          enum: ["stop", "length", "tool_calls", "content_filter", "error"]
          description: Normalized finish reason
        native_finish_reason:
          type: string
          description: Raw finish reason from provider
        logprobs:
          type: object
          description: Log probabilities (if requested)

    Usage:
      type: object
      properties:
        prompt_tokens:
          type: integer
          description: Number of tokens in the prompt
        completion_tokens:
          type: integer
          description: Number of tokens in the completion
        total_tokens:
          type: integer
          description: Total number of tokens

    ModelList:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum: ["list"]
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'

    Model:
      type: object
      required:
        - id
        - object
        - created
        - owned_by
      properties:
        id:
          type: string
          description: Model identifier
        object:
          type: string
          enum: ["model"]
        created:
          type: integer
          description: Unix timestamp of model creation
        owned_by:
          type: string
          description: Organization owning the model
        context_length:
          type: integer
          description: Maximum context length
        architecture:
          type: object
          description: Model architecture details
        pricing:
          type: object
          properties:
            prompt:
              type: string
              description: Cost per million prompt tokens
            completion:
              type: string
              description: Cost per million completion tokens
        top_provider:
          type: object
          description: Information about the top provider for this model

    Generation:
      type: object
      properties:
        id:
          type: string
          description: Generation ID
        model:
          type: string
          description: Model used
        streamed:
          type: boolean
          description: Whether response was streamed
        generation_time:
          type: number
          description: Time taken to generate response
        created_at:
          type: string
          format: date-time
        tokens_prompt:
          type: integer
          description: Number of prompt tokens (native count)
        tokens_completion:
          type: integer
          description: Number of completion tokens (native count)
        native_tokens_prompt:
          type: integer
          description: Native prompt token count
        native_tokens_completion:
          type: integer
          description: Native completion token count
        num_media:
          type: integer
          description: Number of media items processed
        provider_name:
          type: string
          description: Provider used for generation
        moderated:
          type: boolean
          description: Whether content was moderated
        usage:
          type: number
          description: Cost in USD

    KeyInfo:
      type: object
      properties:
        data:
          type: object
          properties:
            label:
              type: string
              description: API key label
            usage:
              type: number
              description: Total usage in USD
            limit:
              type: number
              description: Monthly limit in USD
            is_free_tier:
              type: boolean
              description: Whether using free tier
            rate_limit:
              type: object
              properties:
                requests:
                  type: integer
                  description: Request rate limit

    Credits:
      type: object
      properties:
        data:
          type: object
          properties:
            balance:
              type: number
              description: Current credit balance in USD
            usage:
              type: number
              description: Total usage in USD
            monthly_limit:
              type: number
              description: Monthly spending limit

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
            - type
            - code
          properties:
            message:
              type: string
              description: Human-readable error message
            type:
              type: string
              description: Error type identifier
            code:
              type: string
              description: Error code
            metadata:
              type: object
              description: Additional error information

  responses:
    BadRequest:
      description: Bad Request - Invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized - Invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InsufficientCredits:
      description: Payment Required - Insufficient credits
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    RateLimited:
      description: Too Many Requests - Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Chat
    description: Chat completion endpoints
  - name: Models
    description: Model information and listing
  - name: Generations
    description: Generation details and statistics
  - name: Authentication
    description: API key management
  - name: Credits
    description: Credit balance and usage 